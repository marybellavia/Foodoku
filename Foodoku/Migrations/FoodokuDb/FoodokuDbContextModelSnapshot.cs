// <auto-generated />
using System;
using Foodoku.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Foodoku.Migrations.FoodokuDb
{
    [DbContext(typeof(FoodokuDbContext))]
    partial class FoodokuDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("Foodoku.Models.FoodItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroceryItemLocationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitOfMeasurementID1")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GroceryItemLocationID");

                    b.HasIndex("UnitOfMeasurementID1");

                    b.ToTable("FoodItem");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FoodItem");
                });

            modelBuilder.Entity("Foodoku.Models.GroceryItemLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Foodoku.Models.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<double>("Yield")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("Foodoku.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecipeID", "IngredientID");

                    b.HasIndex("IngredientID");

                    b.ToTable("RecipeIngredient");
                });

            modelBuilder.Entity("Foodoku.Models.UnitOfMeasurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("UnitOfMeasurement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("Foodoku.Models.GroceryItem", b =>
                {
                    b.HasBaseType("Foodoku.Models.FoodItem");

                    b.Property<string>("GroceryNote")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInPantry")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasIndex("LocationID");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("GroceryItem");
                });

            modelBuilder.Entity("Foodoku.Models.Ingredient", b =>
                {
                    b.HasBaseType("Foodoku.Models.FoodItem");

                    b.Property<string>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitOfMeasurementID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("UnitOfMeasurementID");

                    b.HasDiscriminator().HasValue("Ingredient");
                });

            modelBuilder.Entity("Foodoku.Models.FoodItem", b =>
                {
                    b.HasOne("Foodoku.Models.GroceryItemLocation", null)
                        .WithMany("FoodItems")
                        .HasForeignKey("GroceryItemLocationID");

                    b.HasOne("Foodoku.Models.UnitOfMeasurement", null)
                        .WithMany("FoodItems")
                        .HasForeignKey("UnitOfMeasurementID1");
                });

            modelBuilder.Entity("Foodoku.Models.RecipeIngredient", b =>
                {
                    b.HasOne("Foodoku.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foodoku.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foodoku.Models.GroceryItem", b =>
                {
                    b.HasOne("Foodoku.Models.GroceryItemLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Foodoku.Models.Ingredient", b =>
                {
                    b.HasOne("Foodoku.Models.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
